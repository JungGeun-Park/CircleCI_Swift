#!/usr/bin/env ruby

=begin
============================================================================================
|  AppSealing iOS SDK Hash Generator V1.10.0                                                |
|                                                                                          |
|  * presented by Inka Entworks                                                            |
============================================================================================
=end

require 'pathname'
require 'tmpdir'
require 'securerandom'
require 'net/https'
require 'json'
require 'io/console'
require 'xcodeproj'
require 'open-uri'
require 'rexml/document'
include REXML

def internet_connection?
  begin
    true if open( "http://www.google.com/" )
  rescue
    false
  end
end

def to_hex_string( param )
    unpacked = param.unpack('H*').first
    unpacked.gsub(/(..)/,'\1').rstrip
end

$request_param = []
$source_path = []
$enc_strings = {}

LOCAL_TEST = false


$baseURL = 'https://tst-api.appsealing.com/covault/gw/'
$position = 0
$isUnreal = false
$isXamarin = false
$Entitlements = ''
$DistributionSummary = ''
$s3_downloadURL = 'https://appsealing-docs.s3.ap-northeast-1.amazonaws.com/ios-certificate/as_certificate.bin' #MUST KEEP THIS COMMENT


#--------------------------------------------------------------------------------------------
#  소스 코드 파일 내의 태깅 된 문자열 추출
#--------------------------------------------------------------------------------------------
def extract_tagged_strings( path )

    result = []

    if path.end_with?( "AppsealingiOS.mm" )
        return result
    end
	
    #puts "\n\n----------------------------- Extracting : " + path

    begin
		file = File.open( path, "r:UTF-8" )
		file.each_line do |line|
            pos = line.index( '\\0x1\\0x1\\0x1\\0x1"' )
            next if pos == nil
            target_line = line
            loop do
                pos = target_line.index( '\\0x1\\0x1\\0x1\\0x1"' )
                break if pos == nil
                end_pos = pos - 1
                while pos > 1 do
                    pos -= 1
                    next if target_line[pos - 1..pos - 1] != '"'
                    break if target_line[pos - 2..pos - 2] == '@' and path.end_with?( ".m", ".mm" )
                    break if target_line[pos - 2..pos - 2] != '\\'
                end
                string = target_line[pos..end_pos]
				#puts ' >> found : ' + string
                result << string.unpack( 'H*' )[0]
                target_line = target_line[( end_pos + 18 )..-1]
            end
		end
	rescue => e
		puts "error: " +  e.to_s + ".\n.\nInvalid source code file has passed to an argument, check file path and try again.\n.\n.\n"
		exit( 0 )
	ensure
		file.close unless file.nil?
	end
    #puts ' >>> FOUND : ' + result.to_s

    return result    
end


#--------------------------------------------------------------------------------------------
#  appsealing.lic 파일 읽기
#--------------------------------------------------------------------------------------------
def get_accountID_hash_from_license_file( path )
	license = File.open( path, "r+b" )

	header = license.read( 5 )
	magic = "\x41\x53\x4C\x46\x76".force_encoding( Encoding::ASCII_8BIT )	#V2 +
	if header == magic then
		license.read( 3 )
		license.read( 48 )
		license.read( 8 )
		
        # account ID hash 추출
		accountIDhash = license.read( 32 ).unpack( 'c*' )
		$account_id_hash = accountIDhash.pack( 'c*' ).unpack( 'H*' ).first
	end
end


#--------------------------------------------------------------------------------------------
#  문자열 암호화
#--------------------------------------------------------------------------------------------
def get_encrypted_strings( path, param )

    enc_strings_map = {}

    $account_id_hash = get_accountID_hash_from_license_file( path + '/AppSealingSDK/Libraries/appsealing.lic' )

    if LOCAL_TEST then
        $iv = SecureRandom.hex( 16 ).upcase
        $aes_key = SecureRandom.hex( 16 ).upcase

        #puts '### AES IV : ' + $iv.to_s
        #puts '### AES Key : ' + $aes_key.to_s

        param.each { |string|
            # encrypt with AES
            aes = OpenSSL::Cipher::AES.new( "128-CTR" )
            aes.encrypt
            aes.key = [$aes_key].pack( 'H*' )
            aes.iv = [$iv].pack( 'H*' )
            enc = aes.update( string ) + aes.final
            key = to_hex_string( string ).upcase
            enc_strings_map[key] = to_hex_string( enc ).upcase
        }
    else

        uri = URI( $baseURL + 'v3/sdk/requestStringEncryptionForIOS' )

        begin
			request = Net::HTTP::Post.new( uri )
			form_data =
			[
				['bundle_id', $bundle_id],
				['account_id_hash', $account_id_hash],
				['strings', param.join( ',' )]
			]
			request.set_form form_data, 'multipart/form-data'
			response = Net::HTTP.start( uri.hostname, uri.port, use_ssl: uri.scheme == 'https' ) do |http|
				http.request( request )
			end
            result = JSON.parse( response.body )
            code = result['result']['code']
            message = result['result']['message']

            if code != '0000' then
                puts "error: " + message + "\nIf this error occurs continuously, contact AppSealing Help Center.\n.\n.\n"
                exit( 0 )
            end

            # 암호화 키 및 Exported 키 추출
            $iv = result['iv']
            $lea_key_table = result['lea_key_table']
            enc_strings_map = result['encrypted_strings']
            #puts enc_strings_map
        rescue => e
            puts "error: Cannot connect to AppSealing server or bad response, check your network status and try again.\n[Error] " + e.to_s + "\nIf this error occurs continuously, contact AppSealing Help Center.\n.\n.\n"
            exit( 0 )
        end
    end

    modified_source = ""
    line_add = true
    file = File.open( path + '/AppSealingSDK/Libraries/AppsealingiOS.mm' )
    file.each_line { |line|
        if line.strip.end_with?( '///// LEA AREA END : DO NOT DELETE THIS LINE !!!!' )
            line_add = true
            modified_source += line
            next
        end
        if !line.strip.end_with?( '///// LEA AREA BEGIN : DO NOT DELETE THIS LINE !!!!' )
            modified_source += line if line_add
            next
        end

        #puts "----------------------------- Processing : " + path + '/AppSealingSDK/Libraries/AppsealingiOS.mm'

        modified_source += line
        iv_string = "unsigned char __se_iv[16] = { ";
        for i in 0 ... 16
            iv_string += ( '0x' + $iv[( i * 2 )..( i * 2 + 1 )] + ',' )
        end
        modified_source += ( iv_string[0..( iv_string.length - 1)] + " };\n" )

        if LOCAL_TEST
            modified_source += "bool __se_use_lea = false;\n"
            modified_source += "unsigned char __se_key_table[248620];\n"
            key_string = "unsigned char __se_key[16] = { ";
            for i in 0 ... 16
                key_string += ( '0x' + $aes_key[( i * 2 )..( i * 2 + 1 )] + ',' )
            end
            modified_source += ( key_string[0..( key_string.length - 1)] + " };\n" )
        else
            modified_source += "bool __se_use_lea = true;\n"
            modified_source += "unsigned char __se_key[16];\n"
            key_string = "unsigned char __se_key_table[248620] = { ";
            for i in 0 ... 248620
                key_string += ( '0x' + $lea_key_table[( i * 2 )..( i * 2 + 1 )] + ',' )
            end
            modified_source += ( key_string[0..( key_string.length - 1)] + " };\n" )
        end
        line_add = false
    }

    file = File.open( path + '/AppSealingSDK/Libraries/AppsealingiOS.mm', "w+" )
    file.write modified_source
    file.close unless file.nil?

    return enc_strings_map
end


#--------------------------------------------------------------------------------------------
#  문자열 교체
#--------------------------------------------------------------------------------------------
def replace_tagged_strings( path )

    #puts "----------------------------- Replacing : " + path

    modified_source = ""
	if path.end_with?( ".m", ".mm" )
		modified_source = "#import \"AppsealingiOS.h\"\n"
	end

    begin
        file = File.open( path, "r:UTF-8" )
        file.each_line { |line|
            pos = line.index( '\\0x1\\0x1\\0x1\\0x1"')
            if pos == nil
                modified_source += line
                next
            end

            target_line = line
            loop do
                pos = target_line.index( '\\0x1\\0x1\\0x1\\0x1"')
                break if pos == nil
    
                end_pos = pos - 1
                while pos > 1 do
                    pos -= 1
                    next if target_line[pos - 1..pos - 1] != '"'
                    break if target_line[pos - 2..pos - 2] == '@' and path.end_with?( ".m", ".mm" )
                    break if target_line[pos - 2..pos - 2] != '\\'
                end
                string = target_line[pos..end_pos]
                key = to_hex_string( string ).downcase
				#puts '  >> [' + key + '] ' + string
                if path.end_with?( ".m", ".mm" )
                    if target_line[pos - 2..pos - 2] == '@'
                        target_line.sub!( '@"' + string + '\\0x1\\0x1\\0x1\\0x1"', '[AppSealingInterface _DSS:@"' + $enc_strings[key] + '"]' )
                    else
                        target_line.sub!( '"' + string + '\\0x1\\0x1\\0x1\\0x1"', '[[AppSealingInterface _DSC:"' + $enc_strings[key] + '"] UTF8String]' )
                    end
                else
                    target_line.sub!( '"' + string + '\\0x1\\0x1\\0x1\\0x1"', 'String(AppSealingInterface._DSS("' + $enc_strings[key] + '"))' )
                end
            end
            modified_source += target_line
        }

        file = File.open( path, "w+:UTF-8" )
        file.write modified_source
        file.close unless file.nil?

    rescue => e
        puts "error: " + e.to_s + ".\n.\nInvalid source code file has passed to an argument, check file path and try again.\n.\n.\n"
        exit( 0 )
    ensure
        file.close unless file.nil?
    end            
end

#--------------------------------------------------------------------------------------------
#  원본 코드 복원
#--------------------------------------------------------------------------------------------
def restore_original_code( path )
    return if !File.exist?( path + '.org' )
    puts '## Restore : ' + path + '.org ==> ' + path
    system( 'mv "' + path + '.org" "' + path + '"' )
end

#--------------------------------------------------------------------------------------------
#  문자열 암호화 작업 처리 메인
#--------------------------------------------------------------------------------------------
def string_encryption_main()

	#-------------------------------------------------------------------------- check environment
	if !internet_connection?()
		puts "error: No internet connection, check network status !"
		exit( 0 )
	end

	if $project_path == nil or $project_path == '' or !File.exist?( $project_path )
		$project_path = File.dirname( File.dirname( __dir__ ))
	end
	if !File.exist?( $project_path )
		puts "error: Invalid project path : " + $project_path
		exit( 0 )
	end

	xcodeproj = Dir[$project_path + '/**/*.xcodeproj']
	if xcodeproj == nil || xcodeproj.length < 1
		puts "error: Cannon find Xcode project file in : " + $project_path
		exit( 0 )
	end

	#-------------------------------------------------------------------------- open Xcode project
	begin
		project = Xcodeproj::Project.open( xcodeproj[0] )
	rescue => e
		puts "!!! Can't open project : " + e.to_s
	end

	if project.targets.length < 1
		puts "error: There is no target in Xcode project : " + xcodeproj[0]
		exit( 0 )
	end

	target = project.targets.first
	if target == ''
		puts "error: Target name is empty : " + xcodeproj[0]
		exit( 0 )
	end

	#puts '### Process : ' + target.to_s

	#-------------------------------------------------------------------------- check AppSealing SDK
	if !File.exist?( $project_path + '/AppSealingSDK/Libraries/appsealing.lic' )
		puts "error: Cannon find AppSealing license file, check AppSealing SDK files : " + $project_path
		exit( 0 )
	end
	if !File.exist?( $project_path + '/AppSealingSDK/Libraries/AppsealingiOS.mm' )
		puts "error: Cannon find AppsealingiOS.mm interface file, check AppSealing SDK files : " + $project_path
		exit( 0 )
	end


	#-------------------------------------------------------------------------- get bundle ID
	$bundle_id = target.build_configurations.first.build_settings['PRODUCT_BUNDLE_IDENTIFIER']
	if $bundle_id == nil or $bundle_id == ''
		puts "error: Cannot extract bundle ID from : " + target
		exit( 0 )
	end

	#-------------------------------------------------------------------------- find compiled source files
	files = target.source_build_phase.files.to_a.map { |pbx_build_file| pbx_build_file.file_ref.real_path.to_s }
	sources = files.select { |path| path.end_with?( '.m', '.mm', '.swift' ) }
	if sources.length < 1
		puts "error: There is no source files to compile : " + target
		exit( 0 )
	end

	sources.select { |path|
		next if !File.exist?( path )
		if $action == 'restore'
			$source_path << path
			next
		end
		#-------------------------------------------------------------------------- extract strings to be encrypted
		strings = extract_tagged_strings( path )
		next if strings.length == 0
		strings.each { |string| $request_param << string }
		$source_path << path
	}

	#-------------------------------------------------------------------------- encrypt strings
	if $action != "restore" and $request_param.length > 0
		$enc_strings = get_encrypted_strings( $project_path, $request_param )
		#puts $enc_strings
	end

	#-------------------------------------------------------------------------- replace / restore
	$source_path.each do |file, string_list|

		if $action == "restore"
			restore_original_code( file )
		else
			# backup original code
			system( 'cp "' + file + '" "' + file + '.org"' )
			replace_tagged_strings( file )
		end
	end
end

#--------------------------------------------------------------------------------------------
#  _CodeSignature/CodeResources 파일을 읽어 <key>files</key> 항목의 모든 데이터를 문자열로 변환하여 리턴
#--------------------------------------------------------------------------------------------
def generate_hash_snapshot( path )

	dict = false
	data = false
	key = ''
	expect_data = false
	snapshot = ""

	# begin
		file = File.open( path )
		file.each_line do |line|
			sline = line.strip
			break if sline.start_with?( "<key>files2</key>" )	# files2 항목은 건너 뛴다
			if sline.start_with?( "<key>files</key>" )
				next
			end

			if !expect_data and sline.start_with?( "<key>" ) and sline.end_with?( "</key>" )	# key 추출
				key = sline.gsub( "<key>", "" ).gsub( "</key>", "" )
				expect_data = true
				snapshot += ( key + "\1" )	# 스냅샷에 추가
			end
			dict = true if sline.start_with?( "<dict>" ) and expect_data
			dict = expect_data = false if sline.start_with?( "</dict>" ) and dict and expect_data
			if sline.start_with?( "<data>" ) and expect_data
				data = true
				next
			end
			if sline.start_with?( "</data>" )
				data = false;
				expect_data = false if !dict
			end
			if expect_data and data
				snapshot += ( sline + "\n" )	# 스냅샷에 추가
				next
			end
		end
	# rescue => e
	# 	puts ".\n.\nInvalid IPA file has passed to an argument, check your IPA file and try again.\n.\n.\n"
	# 	exit( false )
	# ensure
		file.close unless file.nil?
	# end
	return snapshot
end

#--------------------------------------------------------------------------------------------
#  Payload/app의 certificate와 entitlement를 이용하여 genesis가 추가된 Payload/app에 다시 codesign을 수행
#--------------------------------------------------------------------------------------------
def sign_app_payload( _app, folder, generate_info_only )
	cert = ''
	app = '"' + _app + '"'
	begin
		# 1 app 서명에 사용된 인증서 추출
		system( "cd " + folder + ";codesign -d --extract-certificates " + app )

		cmd = "openssl x509 -inform DER -in " + folder + "codesign0 -noout -nameopt multiline"

		if generate_info_only then
			# 2. provision 추출
			system( "security cms -D -i " + app + "/embedded.mobileprovision > " + folder + "provision.plist" )

			# 3. entitlement 생성
			if $Entitlements == '' then
				system( "/usr/libexec/PlistBuddy -x -c 'Print :Entitlements' " + folder + "provision.plist > " + folder + "entitlements.plist" )
				# system( "cat " + folder + "entitlements.plist" )
			else
				system( 'cp "' + $Entitlements + '" ' + folder + 'entitlements.plist' )
			end

			# genesis에 저장할 인증서 3개 추출
			for i in ['0', '1', '2']
				cmdi = "openssl x509 -inform DER -in " + folder + "codesign" + i + " -noout -nameopt multiline"
				certopt = "no_header,no_version,no_serial,no_signame,no_subject,no_issuer,no_validity,no_pubkey,no_sigdump,no_aux,no_extensions"
				system( cmdi + ",utf8 -subject -issuer -serial -pubkey -text -dates -certopt " + certopt + " > " + folder + "certificate" + i + ".txt" )
				system("openssl rsa -pubin -inform PEM -text -noout < " + folder + "certificate" + i + ".txt > " + folder + "pemformat" + i + ".txt")
			end

			return
		end

		# 4 추출된 leaf 인증서를 X.509 형식으로 변환
		system( cmd + ",-esc_msb,utf8 -subject > " + folder + "certificate.pem" )

		# 5 인증서 명 추출
		file = File.open( folder + "certificate.pem" )
		file.each_line do |line|
			sline = line.strip
			next unless sline.start_with?( "commonName " )
			cert = sline.split( '=' )[1].strip
			break
		end
		file.close unless file.nil?

		if cert == '' then
			puts ".\n.\nCannot get certificate information, check your IPA file and try again.\n.\n.\n"
			exit( false )
		end
		
		# 6 추출된 인증서가 시스템 키체인에 등록된 인증서인지 확인
		valid = false
		system( "security find-identity -v -p codesigning > " + folder + "certificates" )
		file = File.open( folder + "certificates" )
		file.each_line do |line|
			valid = true if line.strip.include?( cert )
		end
		if !valid
			puts ".\n.\nThe certificate used to sign your IPA does not exist in your system, check your system's key-chain and try again.\n"
			puts "** App's certificate : " + cert
			puts "** System keychain's certificate : "
			system( "security find-identity -v -p codesigning" )
			# exit( false )
		end
		file.close unless file.nil?
	
		# 7 codesign 실행
		system( "rm -r " + app + "/_CodeSignature" )
		system( 'codesign -f -s "' + cert + '" --entitlements ' + folder + 'entitlements.plist ' + app + '/' )
	rescue => e
		puts ".\n.\nProblem has occurred while code-signing your app, please try again.\n[Error] " + e.to_s + "\nIf this error occurs continuously, contact AppSealing Help Center.\n.\n.\n"
		exit( false )
	end
end


#--------------------------------------------------------------------------------------------
#  appsealing.lic 파일 읽기
#--------------------------------------------------------------------------------------------
def get_accountID_hash_from_license_file( path )
	license = File.open( path, "r+b" )

	#header = license.read( 8 )
	#magic = "\x41\x53\x4C\x46\x76\x32\x0A\x0D".force_encoding( Encoding::ASCII_8BIT )	#V2
	header = license.read( 5 )
	magic = "\x41\x53\x4C\x46\x76".force_encoding( Encoding::ASCII_8BIT )	#V2 +
	if header == magic then
		license.read( 3 )
		$sdk_version = license.read( 48 ).gsub( /\000/, '' )
		#puts " ===> version : " + $sdk_version
		license.read( 8 )
		# account ID hash 추출
		accountIDhash = license.read( 32 ).unpack( 'c*' )
		$account_id_hash = accountIDhash.pack( 'c*' ).unpack( 'H*' ).first
		#puts " ===> account id : " + $account_id_hash
	end
end

#--------------------------------------------------------------------------------------------
#  unreal 실행 파일에서 appsealing license 추출하기
#--------------------------------------------------------------------------------------------
def get_accountID_hash_from_unreal_executable( path )
	
	$current_step += 1
	puts "\n" + $current_step.to_s + ". Extracting accound ID from Unreal executable file ..."

	file_size = File.size( path )
	
	$position = 0
	parse_finished = false

	uiThread = Thread.new {
		loop do
			print "\r  ==> Searching license in Unreal-Executable : " + $position.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
			sleep 0.5
			break if parse_finished
			break if $position >= file_size
		end
		puts ''
	}

	magic1 = "\x41\x53\x4C\x46".force_encoding( Encoding::ASCII_8BIT )	#V2
	magic2 = "\x76\x34\x0A\x0D".force_encoding( Encoding::ASCII_8BIT )
	sdk = "\x0\x0\x0\x0\x0".force_encoding( Encoding::ASCII_8BIT )

	parseThread = Thread.new {
		File.open( path, 'rb' ) do |f|
			while data = f.read( 4 * 1024 * 1024 ) do
				offset = 0
				while offset < data.length do
					if data[(offset)..(offset + 3)] == magic1 then
						if data[(offset + 4)..(offset + 7)] == magic2 and data[(offset + 51)..(offset + 55)] == sdk then

							$sdk_version = data[(offset + 8)..(offset + 56)].gsub( /\000/, '' )
							accountIDhash = data[(offset + 64)..(offset + 95)].unpack( 'c*' )
							bundle_id = data[(offset + 96)..(offset + 96 + 255)].strip
							
							if $bundle_id.strip.include? bundle_id then	# (헤더 매직 일치) AND (SDK버전 마지막 8byte가 0) AND (번들ID 포함)
								$account_id_hash = accountIDhash.pack( 'c*' ).unpack( 'H*' ).first
								parse_finished = true
								$isUnreal = true
								break
							end
						end
					end
					$position = $position + 1
					offset = offset + 1
				end
				break if parse_finished
				break if $position >= file_size
			end
		end
	}
	parseThread.join
	uiThread.join

	if !parse_finished then
		puts ".\n.\nCannot extract AppSealing license. Please check if you included the license file in the build."
		puts "[Error] " + e.to_s + "\n"
		puts "If this error occurs continuously, contact AppSealing Help Center.\n.\n.\n"
		exit( false )
	end
end

#--------------------------------------------------------------------------------------------
#  JavaScript bytecode(main.jsbundle) 파일 암호화
#--------------------------------------------------------------------------------------------
def encrypt_javascript_bytecode( app )
	if $sdk_version.start_with?( 'NEW' ) then
		$sdk_version = '1.0.0.0'
	end
	#$sdk_version = '1.3.1.1'
	$use_ssl = true
	if $baseURL.start_with?( "http://" )
		$use_ssl = false
	end

	$current_step += 1
	puts "\n" + $current_step.to_s + ". Encrypting React Native javascript bytecode file ..."

	system( 'cd "' + app.to_s + '";zip -q main.zip main.jsbundle' )
	jsfile = File.open( app.to_s + "/main.zip", "rb" )
	result_path = app.to_s + "/enc_main.zip"

	# 7-1. bundle ID 및 account ID hash 추출
	sealing_api  = $baseURL + 'html5/requestSealingForIOS'
	check_api    = $baseURL + 'html5/sealingStatusForIOS'
	download_api = $baseURL + 'html5/downloadSealedFileForIOS'

	finished = false

	puts "** Sealing : " + sealing_api.to_s + "\n  > bundle ID : " + $bundle_id + "\n  > Account ID : " + $account_id_hash + "\n  > SDK version : " + $sdk_version + "\n"

	uiThread = Thread.new {
		print '  ==> Processing for sealing '
		loop do
			print '.'		
			sleep 0.5
			break if finished
		end
		print ' Done!'
		puts ''
	}

	netThread = Thread.new {
		begin
			# 7-2. 암호화(실링) 요청
			uri = URI( sealing_api )
			request = Net::HTTP::Post.new( uri )
			form_data =
			[
				['bundle_id', $bundle_id],
				['account_id_hash', $account_id_hash],
				['sdk_version', $sdk_version],
				['html5file', jsfile]
			]
			request.set_form form_data, 'multipart/form-data'
			response = Net::HTTP.start( uri.hostname, uri.port, use_ssl: $use_ssl ) do |http|
				http.request( request )
			end

			# 7-3. 결과 확인 및 pack_id 추출
			result = JSON.parse( response.body )
			code = result['result']['code']
			if code != '0000' then
				raise result['result']['message']
			end
			pack_id = result['SEALING_INFO']['pack_id']


			# 7-4. 암호화(실링) 상태 확인
			uri = URI( check_api )
			request = Net::HTTP::Post.new( uri )
			form_data = [['pack_id', pack_id]]
			request.set_form form_data, 'multipart/form-data'

			loop do
				response = Net::HTTP.start( uri.hostname, uri.port, use_ssl: $use_ssl ) do |http|
					http.request( request )
				end

				result = JSON.parse( response.body )
				code = result['result']['code']
				status = result['SEALING_INFO']['status']
				if code != '0000' then
					raise result['result']['message']
				end

				case status
				when '2'
					break
				when '3'
					raise result['SEALING_INFO']['message']
				end
				sleep 0.5	# 0.5초 간격으로 확인
			end


			# 7-5. 암호화(실링) 파일 다운로드
			uri = URI( download_api )
			request = Net::HTTP::Post.new( uri )
			form_data =
			[
				['bundle_id', $bundle_id],
				['account_id_hash', $account_id_hash],
				['pack_id', pack_id]
			]
			request.set_form form_data, 'multipart/form-data'

			response = Net::HTTP.start( uri.hostname, uri.port, use_ssl: $use_ssl ) do |http|
				http.request( request )
			end

			begin
				result = JSON.parse( response.body )
				code = result['result']['code']
			rescue => e
				# File response !!
				open( result_path, "wb") do |file|
					file.write( response.body )
				end	
				system( 'cd "' + app.to_s + '";unzip -qo enc_main.zip' )
				File.delete( app.to_s + '/main.zip' ) if File.exist?( app.to_s + '/main.zip' )
				File.delete( app.to_s + '/enc_main.zip' ) if File.exist?( app.to_s + '/enc_main.zip' )
				system( 'xattr -cr "' + app.to_s + '/main.jsbundle"' )
			end
		rescue => e
			puts ".\n.\nCannot connect to AppSealing server or bad response, check your network status and try again.\n(Did you run this script twice in the same file?)"
			puts "[Error] " + e.to_s + "\n"
			puts "** Your data : \n  > bundle ID : " + $bundle_id + "\n  > Account ID : " + $account_id_hash + "\n  > SDK version : " + $sdk_version + "\n"
			puts "If this error occurs continuously, contact AppSealing Help Center.\n.\n.\n"
			exit( false )
		end
		finished = true
	}
	netThread.join
	uiThread.join

	$current_step += 1
	puts "\n" + $current_step.to_s + ". Successfully encrypted javascript bytecode ..."
end


#--------------------------------------------------------------------------------------------
# PlistManager 클래스는 plist 파일을 관리하는 기능을 제공합니다.
# plist 파일은 XML 형식으로 저장되며, 이 클래스는 파일 읽기, 쓰기, 수정 등의 작업을 수행합니다.
#--------------------------------------------------------------------------------------------
class PlistManager
	def initialize(file_path)
		@file_path = file_path # plist 파일 경로를 인스턴스 변수로 저장
		@doc = nil             # plist 파일의 XML 데이터를 저장할 변수
		load_file              # 파일을 로드하여 XML 문서를 초기화
	end

	# plist 파일을 읽어 XML 문서를 메모리에 로드합니다.
	def load_file
		File.open(@file_path, 'r') do |file|
			@doc = REXML::Document.new(file) # XML 문서 객체 생성
		end
		rescue StandardError => e
		puts "Error loading file: #{e.message}" # 파일 읽기 실패 시 에러 메시지 출력
		exit(false)
	end

	# 현재 메모리에 로드된 XML 문서를 plist 파일에 저장합니다.
	def save_file
		File.open(@file_path, 'w') do |file|
			formatter = REXML::Formatters::Pretty.new(4) # 들여쓰기 4칸 설정
			formatter.compact = true                     # 빈 줄 제거
			formatter.write(@doc, file)
		end

		# 저장된 파일을 다시 읽어와서 XML 선언 부분의 작은따옴표를 큰따옴표로 변환
		content = File.read(@file_path)
		content.gsub!(/<\?xml version='1\.0' encoding='UTF-8'\?>/, '<?xml version="1.0" encoding="UTF-8"?>')
		content.gsub!(/<plist version='1\.0'>/, '<plist version="1.0">')
		File.write(@file_path, content)
	rescue StandardError => e
		puts "Error saving file: #{e.message}"
		exit(false)
	end

	# 특정 key의 값을 업데이트하거나 새로 추가합니다.
	# value가 nil이면 해당 key를 plist에서 제거합니다.
	def update_key(key, value)
		element = REXML::XPath.first(@doc, "//key[text()='#{key}']") # key를 찾음
	
		if value.nil?
		# value가 nil이면 key와 값을 삭제
		remove_key(element) if element
		elsif element
		# key가 존재하면 값 업데이트
		next_element = element.next_element
	
		if next_element && next_element.name == 'string' && value.is_a?(String)
			# 기존 값이 문자열일 경우 업데이트
			next_element.text = value
		elsif next_element && next_element.name == 'array' && value.is_a?(Array)
			# 기존 값이 배열일 경우 교체
			replace_array_values(next_element, value)
		else
			# 기존 값이 다른 타입이면 교체
			replace_value(element, value)
		end
		else
		# key가 없으면 새로 추가
		add_new_key(key, value)
		end
	end
	
	# 특정 key의 값을 읽어옵니다.
	def read(key)
		element = REXML::XPath.first(@doc, "//key[text()='#{key}']")
		return nil unless element
	
		next_element = element.next_element
	
		case next_element.name
		when 'string'
		  next_element.text # 문자열 값을 반환
		when 'array'
		  next_element.elements.map(&:text) # 배열 값을 반환 (각 요소의 텍스트)
		when 'true'
		  true # <true/> 값을 처리
		when 'false'
		  false # <false/> 값을 처리
		else
		  nil # 처리하지 않는 타입의 경우 nil 반환
		end
	end

	# 특정 key의 배열 값 중 지정된 인덱스를 수정하거나 제거합니다.
	def update_array_value(key, index, value)
		element = XPath.first(@doc, "//key[text()='#{key}']")
		return unless element
	
		array_element = element.next_element if element.next_element.name == 'array'
		return unless array_element
	
		array_items = array_element.elements.to_a
		if index < array_items.size && index >= 0
			if value.nil?
				# value가 nil이면 해당 인덱스의 요소를 제거
				array_element.delete(array_items[index])
			else
				# value가 nil이 아니면 해당 인덱스의 값을 수정
				array_items[index].text = value
			end
		else
			puts "Index out of bounds" # 인덱스가 유효하지 않으면 메시지 출력
		end
	end
	
	# 특정 key의 배열에 value를 포함하는 값이 있는지 확인하고, 인덱스를 반환합니다.
	def array_contains?(key, value)
		element = XPath.first(@doc, "//key[text()='#{key}']")
		return -1 unless element
	
		array_element = element.next_element if element.next_element.name == 'array'
		return -1 unless array_element
	
		array_values = array_element.elements.to_a.map(&:text) # 배열의 모든 텍스트 요소 가져오기
		array_values.each_with_index do |item, index|
			return index if item.include?(value) # value를 포함하는 값이 있으면 인덱스 반환
		end
	
		-1 # value를 포함하는 값이 없으면 -1 반환
	end

	# 특정 key의 배열에서 org_value를 포함하는 모든 값을 new_value로 변경합니다.
	def update_or_remove_array_value(key, org_value, new_value)
		element = REXML::XPath.first(@doc, "//key[text()='#{key}']")
		return unless element
	  
		array_element = element.next_element if element.next_element&.name == 'array'
		return unless array_element
	  
		# 배열 요소를 복사하여 안전하게 순회
		array_items = array_element.elements.to_a.dup
		array_items.each do |item|
			if item.text.include?(org_value)
				if new_value.nil?
					array_element.delete(item) # org_value를 포함하는 항목 삭제
				else
					item.text = new_value # org_value를 포함하는 항목을 new_value로 변경
				end
		  	end
		end
	end
	  
	  
	# plist 파일의 내용을 콘솔에 출력합니다.
	def print
		puts '======================================================================================================================='
		formatter = REXML::Formatters::Pretty.new(4) # 들여쓰기 4칸 설정
		formatter.compact = true # 빈 줄 제거
		formatter.write(@doc, $stdout) # 콘솔에 출력
		puts # 줄바꿈 추가 (출력 후)
		puts '-----------------------------------------------------------------------------------------------------------------------'
	end

	private
	
	# 기존 key에 문자열 요소를 추가합니다.
	def add_string_element(key_element, value)
	  dict_element = key_element.parent          # 부모 <dict> 요소를 가져옴
	  dict_element.add_element('string').text = value # 새로운 <string> 요소 추가 및 값 설정 
	end

	# Helper 메소드: 특정 key와 그 값을 plist에서 제거합니다.
	def remove_key(key_element)
		return unless key_element
	
		dict_element = key_element.parent          # 부모 <dict> 요소 가져옴
		next_element = key_element.next_element    # 해당 key의 값 요소 (<string>, <array> 등)
	
		dict_element.delete(key_element)           # key 요소 삭제
		dict_element.delete(next_element) if next_element # 값 요소도 함께 삭제
	end
	
	# Helper 메소드: 배열 값을 교체 (기존 배열을 새 배열로 대체)
	def replace_array_values(array_element, new_values)
		# 모든 기존 자식 요소 삭제
		array_element.elements.each { |child| array_element.delete(child) }
	
		# 새 값 추가
		new_values.each do |val|
		array_element.add_element('string').text = val
		end
	end
  
	# Helper 메소드: 기존 값을 새로운 타입으로 교체 (key는 유지)
	def replace_value(key_element, value)
		dict_element = key_element.parent          # 부모 <dict> 요소 가져옴
		next_element = key_element.next_element    # 기존 <string> 또는 <array> 요소 가져오기
	
		dict_element.delete(next_element) if next_element # 기존 값을 삭제
	
		if value.is_a?(Array)
		# 새 값이 배열인 경우 <array> 생성
		array_element = REXML::Element.new('array') # 새 <array> 요소 생성
		value.each { |val| array_element.add_element('string').text = val }
		dict_element.insert_after(key_element, array_element) # <key> 뒤에 추가
		else
		# 새 값이 문자열인 경우 <string> 생성
		string_element = REXML::Element.new('string') # 새 <string> 요소 생성
		string_element.text = value
		dict_element.insert_after(key_element, string_element) # <key> 뒤에 추가
		end
	end

	# Helper 메소드: 새로운 key와 값을 plist에 추가합니다.
	def add_new_key(key, value)
		dict_element = REXML::XPath.first(@doc, '//dict')   # 최상위 <dict> 요소 찾기
		return unless dict_element                         # <dict> 요소가 없으면 종료

		key_element = REXML::Element.new('key')            # 새로운 <key> 요소 생성
		key_element.text = key                             # <key>에 텍스트 설정
		dict_element.add_element(key_element)              # <dict>에 <key> 추가

		if value.is_a?(Array)
			array_element = REXML::Element.new('array')      # 배열 값일 경우 <array> 생성
			value.each { |val| array_element.add_element('string').text = val }   # 각 배열 항목 추가
			dict_element.add_element(array_element)          # <dict>에 <array> 추가
		else
			string_element = REXML::Element.new('string')    # 문자열 값일 경우 <string> 생성
			string_element.text = value                      #
			dict_element.add_element(string_element)         # <dict>에 <string> 추가
		end
	end
end

#--------------------------------------------------------------------------------------------
# main
#--------------------------------------------------------------------------------------------
if __FILE__ == $0

	if ARGV.length >= 1 and ( ARGV[0] == "apply" or ARGV[0] == "restore" )
		$action =  ARGV[0]
		$project_path =  ARGV[1]
		string_encryption_main()
		exit( 0 )
	end

	if ARGV.length < 1 or File.extname( ARGV[0] ).delete( '.' ).downcase[0..-1] != 'ipa'
		puts ".\n.\nusage: generate_hash YourApp.IPA [-url_scheme=url] [-icloud_services=service] [-camera=NSCameraUsageDescription] [-antihook=enable|disable] [-antiswizzle=enable|disable]"
		puts "         url : URL scheme for Unreal app [optional]"
		puts "         service : iCloud Services capability (CloudKit,CloudDocuments) [optional]"
		puts "         camera : camera usage description string to put into Info.plist [optional]"
		puts "         antihook : enable or disable anti-hooking feature [optional, default=enabled]"
		puts "         antiswizzle : enable or disable anti-swizzling feature [optional, default=disabled]"
		puts ".\n.\n.\n"
		exit( false )
	end

	puts <<~INTRO
	
	+-------------------------------------------------------------------------------------+
	|                                                                                     |
	|  AppSealing IPA Hash Generator V1.9.2.0 : provided by INKA Entworks                 |
	|                                                                                     |
	+-------------------------------------------------------------------------------------+
	
	INTRO
	puts "[Target IPA]          = " + ARGV[0].to_s
	
	for i in 1 ... ARGV.length
		if ARGV[i].include?( "-url_scheme=" ) then
			$URL_Scheme = ARGV[i].dup.to_s.sub!( "-url_scheme=", "" )
			puts "[URL Scheme]          = " + $URL_Scheme
		end
		if ARGV[i].include?( "-icloud_services=" ) then
			$CloudServices = ARGV[i].dup.to_s.sub!( "-icloud_services=", "" )
			puts "[iCloud Services]     = " + $CloudServices
		end
		if ARGV[i].include?( "-camera=" ) then
			$CameraDesc = ARGV[i].dup.to_s.sub!( "-camera=", "" )
			puts "[Camera Description]  = " + $CameraDesc
		end
		if ARGV[i].include?( "-entitlements=" ) then
			$Entitlements = ARGV[i].dup.to_s.sub!( "-entitlements=", "" )
			puts "[Entitlements]        = " + $Entitlements
		end
		if ARGV[i].include?( "-antihook=" ) then
			$antihook = ARGV[i].dup.to_s.sub!( "-antihook=", "" )
			puts "[Anti-Hooking]        = " + $antihook
		end
		if ARGV[i].include?( "-antiswizzle=" ) then
			$antiswizzle = ARGV[i].dup.to_s.sub!( "-antiswizzle=", "" )
			puts "[Anti-Swizzling]      = " + $antiswizzle
		end
		if ARGV[i].include?( "-distribution_summary=" ) then
			$DistributionSummary = ARGV[i].dup.to_s.sub!( "-distribution_summary=", "" )
			puts "[DistributionSummary] = " + $DistributionSummary
		end
	end

	# Unreal Shipping IPA를 App Store Connect에 업로드 할 때 "ERROR ITMS-90158" 오류가 발생하면
	# 이 파라미터를 추가해 Info.plist의 CFBundleURLSchemes 값을 새로 설정하여 오류를 수정할 수 있음

	#........................................................................................
	# [Step 1] IPA 압축 해제
	
	if !File.exist?( ARGV[0].to_s ) then
		puts ".\n.\nIPA file does not exist, please check path the IPA.\n.\n.\n"
		exit( false )
	end

	# 임시 temp 디렉터리 생성 및 클리어
	folder = Dir.tmpdir() + "/AppSealing/" + SecureRandom.hex + "/"
	#folder = "/Users/puzznic/Project/Temp/";

	puts "\n[Working Directory] = " + folder

	FileUtils.mkdir_p folder
	system( 'rm -rf "' + folder + '*"' )

	# ipa 압축 해제
	system( 'unzip -q "' + ARGV[0] + '" -d ' + folder + "Package/" );
	app = Dir[folder + "Package/Payload/*"][0]	# app name

	if !File.exist?( app.to_s + "/_CodeSignature/CodeResources" ) then
		puts ".\n.\nInvalid IPA file has passed to an argument, check your IPA file has codesigned and try again.\n.\n.\n"
		exit( false )
	end
	if File.exist?( app.to_s + "/Xamarin.iOS.dll" ) then
		$isXamarin = true
		system( "/usr/libexec/PlistBuddy -x -c 'Print ' " + app + "/Entitlements.plist > " + folder + "XamarinEntitlements.plist" )
	end
	if File.exist?( app.to_s + "/genesis" ) then
		system( 'rm "' + app.to_s + '/genesis"' )
	end

	puts "\n\n1. Payload has extracted from the IPA ..."

	# Info.plist 파일을 평문으로 변경
	system( '/usr/libexec/PlistBuddy -x -c \'Print \' "' + app + '/Info.plist" > "' + folder + 'Info.plist"' )
	system( 'cp "' + folder + 'Info.plist" "' + app + '/Info.plist"' )

	# URL scheme 변경
	if $URL_Scheme
		puts "\n --> Changing URL Scheme to : #{$URL_Scheme}"
		plist_manager = PlistManager.new( app + "/Info.plist" )
		plist_manager.update_key( 'CFBundleURLSchemes', $URL_Scheme )
		plist_manager.save_file
	end		

	# ........................................................................................
	# [Step 2] Unreal 앱 AppStore Connect 업로드 오류 해결을 위해 프로퍼티 추가

	# Camera description 변경
	if $CameraDesc
		puts "\n --> Changing NSCameraUsageDescription to : #{$CameraDesc}"
		plist_manager = PlistManager.new( app + "/Info.plist" )
		plist_manager.update_key( 'NSCameraUsageDescription', $CameraDesc )
		plist_manager.save_file
	end	

	
	#........................................................................................
	# # [Step 2] AppSealing 서버로 부터 WBC 키 받아 오기

	# this part is moved to the server
	$current_step = 2


	#........................................................................................
	# [Step 3] 앱 서명에 사용된 인증서 정보를 읽어 genesis에 추가

	sign_app_payload( app, folder, true )
	
	if !File.exist?( folder + "entitlements.plist" )
		puts "error: Cannon extract entitlements.plist from IPA, try rebuild app..."
		exit( 0 )
	end


	#........................................................................................
	# [Step 4] license 에서 account ID 추출

	if File.exist?( app.to_s + "/appsealing.lic" ) then
		get_accountID_hash_from_license_file( app.to_s + "/appsealing.lic" )
	else
		get_accountID_hash_from_unreal_executable( app.to_s + '/' + File.basename( app.to_s, File.extname( app.to_s )))
	end

	# plist_manager = PlistManager.new( app + "/Info.plist" )
	# plist_manager.print

	# plist_manager = PlistManager.new( folder + "entitlements.plist" )
	# plist_manager.print
	entitlements =
	{
		'app_id0' => plist_manager.read( 'application-identifier' ),
		'team_id0' => plist_manager.read( 'com.apple.developer.team-identifier' ),
		'domains' => plist_manager.read( 'com.apple.developer.associated-domains' ),
		'keychain' => plist_manager.read( 'keychain-access-groups' ),
		'icloud-dev-id' => plist_manager.read( 'com.apple.developer.icloud-container-development-container-identifiers' ),
		'icloud-env' => plist_manager.read( 'com.apple.developer.icloud-container-environment' ),
		'icloud-cont-id' => plist_manager.read( 'com.apple.developer.icloud-container-identifiers' ),
		'icloud-svc' => plist_manager.read( 'com.apple.developer.icloud-services' ),
		'ubkvs_id' => plist_manager.read( 'com.apple.developer.ubiquity-kvstore-identifier' ),
		'ubcont_id' => plist_manager.read( 'com.apple.developer.ubiquity-container-identifiers' ),
		'passtype_id' => plist_manager.read( 'com.apple.developer.pass-type-identifiers' )
	}
	xamarin_entitlements = {}
	# puts JSON.pretty_generate( entitlements )

	if $isXamarin
		xamarin_manager = PlistManager.new( folder + "XamarinEntitlements.plist" )
		xamarin_entitlements =
		{
			'domains-xamarin' => xamarin_manager.read( 'com.apple.developer.associated-domains' ),
			'keychain-xamarin' => xamarin_manager.read( 'keychain-access-groups' ),
			'icloud-cont-id' => xamarin_manager.read( 'com.apple.developer.icloud-container-identifiers' ),
			'icloud-env' => xamarin_manager.read( 'com.apple.developer.icloud-container-environment' ),
			'icloud-svc-xamarin' => xamarin_manager.read( 'com.apple.developer.icloud-services' )
		}
	end

	# app_id에 wildcard가 포함되어 있을 경우 bundle ID로 대체
	if entitlements['app_id0'] != nil and entitlements['app_id0'].end_with?( '.*' )
		old_app_id = entitlements['app_id0']

		# app의 bundle ID 추출
		system( "osascript -e 'id of app \"" + app + "\"' > " + folder + "bundle_id" )

		file = File.open( folder + "bundle_id" )
		file.each_line do |line|
			$bundle_id = line.strip
		end
		file.close unless file.nil?
		
		if $bundle_id == '????'
			# DistributionSummary.plist 파일 열기
			pn = Pathname.new( ARGV[0].to_s )
			if $DistributionSummary == ''
				dist_summary = pn.dirname.to_s + Pathname::SEPARATOR_LIST + 'DistributionSummary.plist'
			else
				dist_summary = $DistributionSummary
			end

			if File.exist?( dist_summary )
				dist_manager = PlistManager.new( dist_summary )
				$bundle_id = dist_manager.read( 'application-identifier' ).gsub( entitlements['team_id0'] + '.', '' )
			end
		end

		entitlements['app_id0'] = entitlements['team_id0'] + '.' + $bundle_id

		# wildcard가 제거된 bundle ID로 대체
		plist_manager.update_key( 'application-identifier', entitlements['app_id0'] )
		puts "  ==> Application ID replaced : " + old_app_id + " >> " + entitlements['app_id0']
	end

	$bundle_id = entitlements['app_id0'].gsub( entitlements['team_id0'] + '.', '' )

	# ubiquity-kvstore-identifier에 wildcard가 포함되어 있을 경우 bundle ID로 대체
	if entitlements['ubkvs_id'] != nil and entitlements['ubkvs_id'].end_with?( '.*' )
		plist_manager.update_key( 'com.apple.developer.ubiquity-kvstore-identifier', entitlements['team_id0'] + '.' + $bundle_id )
	end

	# ubiquity-container-identifier에 wildcard가 포함되어 있을 경우 bundle ID로 대체
	if entitlements['ubcont_id'] != nil
		plist_manager.update_or_remove_array_value( 'com.apple.developer.ubiquity-container-identifiers', '.*', entitlements['team_id0'] + '.' + $bundle_id )
	end

	# com.apple.developer.pass-type-identifiers 에 wildcard가 포함되어 있을 경우 bundle ID로 대체
	if entitlements['passtype_id'] != nil
		plist_manager.update_or_remove_array_value( 'com.apple.developer.pass-type-identifiers', '.*', entitlements['team_id0'] + '.' + $bundle_id )
	end

	# associated domains 태그의 값이 *인 경우 DistributionSummary.plist 파일에서 해당 값을 가져와 대채
	if entitlements['domains'] != nil and entitlements['domains'].to_s == '*'

		if $isUnreal then
			entitlements['domains'] = entitlements['app_id0']

		elsif $isXamarin
			entitlements['domains'] = xamarin_entitlements['domains-xamarin']
		
		else
			# DistributionSummary.plist 파일 열기
			pn = Pathname.new( ARGV[0].to_s )
			if $DistributionSummary == ''
				dist_summary = pn.dirname.to_s + Pathname::SEPARATOR_LIST + 'DistributionSummary.plist'
			else
				dist_summary = $DistributionSummary
			end
			if File.exist?( dist_summary )
				dist_manager = PlistManager.new( dist_summary )
				entitlements['domains'] = dist_manager.read( 'com.apple.developer.associated-domains' )
			end
		end

		# wildcard가 제거된 associated domains로 대체
		if entitlements['domains'].to_s == '' or entitlements['domains'].to_s == '[]' or entitlements['domains'].to_s == '*' then	# empty in DistSummary
			plist_manager.update_key( 'com.apple.developer.associated-domains', nil )
		else
			plist_manager.update_key( 'com.apple.developer.associated-domains', entitlements['domains'] )
			puts "  ==> Associated domains repaired : * >> " + entitlements['domains'].to_s
		end
	end

	# keychain-access-groups 태그의 값이 *인 경우 DistributionSummary.plist 파일에서 해당 값을 가져와 대채
	if entitlements['keychain'] != nil and plist_manager.array_contains?( 'keychain-access-groups', '.*' ) >= 0
		if $isUnreal or $isXamarin then
			plist_manager.update_array_value( 'keychain-access-groups', index, entitlements['app_id0'] )

		elsif $isXamarin
			plist_manager.update_array_value( 'keychain-access-groups', index, xamarin_entitlements['keychain-xamarin'] )
		
		else
			# DistributionSummary.plist 파일 열기
			pn = Pathname.new( ARGV[0].to_s )
			if $DistributionSummary == ''
				dist_summary = pn.dirname.to_s + Pathname::SEPARATOR_LIST + 'DistributionSummary.plist'
			else
				dist_summary = $DistributionSummary
			end

			if File.exist?( dist_summary )
				dist_manager = PlistManager.new( dist_summary )
				keychain = dist_manager.read( 'keychain-access-groups' )
			end

			# wildcard가 제거된 keychain-access-groups로 대체
			if keychain != nil and keychain.to_s != '[]' then
				plist_manager.update_key( 'keychain-access-groups', keychain )
				# modified_entitlement.sub!( cert_info['keychain'], keychain.strip.gsub( /\s+/, '' ) )
				puts "  ==> Keychain access groups repaired : \n" + plist_manager.read( 'keychain-access-groups' ).to_s
			else
				# only repair *
				plist_manager.update_or_remove_array_value( 'keychain-access-groups', '.*', entitlements['team_id0'] + '.' + $bundle_id )
				puts "  ==> Keychain access groups repaired : \n" + plist_manager.read( 'keychain-access-groups' ).to_s
			end
		end
	end	

	# icloud-services 태그의 값이 *인 경우 DistributionSummary.plist 파일에서 해당 값을 가져와 대채
	if entitlements['icloud-svc'] != nil and entitlements['icloud-svc'].to_s == '*'

		if $isUnreal then
			if $CloudServices != nil and $CloudServices != '' then
				if !$CloudServices.include?( ',' ) then
					if $CloudServices == 'none'
						entitlements['icloud-svc'] = ''
					else
						entitlements['icloud-svc'] = '<array><string>' + $CloudServices + '</string></array>'
					end
				else
					svcs = $CloudServices.split( ',' )
					entitlements['icloud-svc'] = '<array><string>' + svcs[0].strip + '</string><string>' + svcs[1].strip + '</string></array>'
				end
			else	# 콘솔에서 직접 입력
				puts "\n ------------------------------------------------------------------------------------------------------"
				puts "  You need to select iCoude-Service items info for your IPA does not include DistributionSummary.plist"
				puts " ------------------------------------------------------------------------------------------------------"
				puts "  0) Not uses iCloud        [Default] (parameter: -icloud_services=none)"
				puts "  1) CloudKit                         (parameter: -icloud_services=CloudKit)"
				puts "  2) iCloudDocuments                  (parameter: -icloud_services=CloudDocuments)"
				puts "  3) CloudKit + iCloudDocuments       (parameter: -icloud_services=CloudKit,CloudDocuments)"
				puts " ......................................................................................................"
				print "  * Select option [Enter=0] : "
				while true do
					input = STDIN.getch
					if input.ord == 27 || input.ord == 3 then
						exit( 0 )
					end
					if input.ord == 13 then
						input = '0'
						break
					end
					if input == '0' or (input.ord >= 49 && input.ord <= 52) then
						break
					end
				end
				puts input
				puts "\n"
				if input == '0' then
					entitlements['icloud-svc'] = ''
				elsif input == '1' then
					entitlements['icloud-svc'] = ['CloudKit']
				elsif input == '2' then
					entitlements['icloud-svc'] = ['CloudDocuments']
				else
					entitlements['icloud-svc'] = ['CloudKit', 'CloudDocuments']
				end
			end

		elsif $isXamarin
			entitlements['icloud-svc'] = xamarin_entitlements['icloud-svc-xamarin']

		else
			# DistributionSummary.plist 파일 열기
			pn = Pathname.new( ARGV[0].to_s )
			if $DistributionSummary == ''
				dist_summary = pn.dirname.to_s + Pathname::SEPARATOR_LIST + 'DistributionSummary.plist'
			else
				dist_summary = $DistributionSummary
			end
			if File.exist?( dist_summary )
				dist_manager = PlistManager.new( dist_summary )
				entitlements['icloud-svc'] = dist_manager.read( 'com.apple.developer.icloud-services' )
			end
		end

		# wildcard가 제거된 icloud-services 대체
		if entitlements['icloud-svc'] == '' or entitlements['icloud-svc'] == '*' then
			# modified_entitlement.sub!( '<key>com.apple.developer.icloud-services</key>', '' )
			plist_manager.update_key( 'com.apple.developer.icloud-services', nil )
		else
			puts "  ==> iCloud-services repaired : * >> " + entitlements['icloud-svc'].to_s
			plist_manager.update_key( 'com.apple.developer.icloud-services', entitlements['icloud-svc'] )
		end
	end

	plist_manager.update_key( 'com.apple.developer.icloud-container-development-container-identifiers', nil )
	if entitlements['icloud-dev-id'] != nil and ( entitlements['icloud-dev-id'].to_s == '' || entitlements['icloud-dev-id'].to_s == '[]' ) and entitlements['icloud-cont-id'] != nil and ( entitlements['icloud-cont-id'].to_s == '' || entitlements['icloud-cont-id'].to_s == '[]' ) then
		plist_manager.update_key( 'com.apple.developer.icloud-container-identifiers', nil )
		plist_manager.update_key( 'com.apple.developer.icloud-services', nil )
	end

	if entitlements['icloud-svc'] then
		if entitlements['icloud-env'].to_s == '[]' then
			plist_manager.update_key( 'com.apple.developer.icloud-container-environment', 'com.apple.developer.icloud-services' )
		end
		if plist_manager.array_contains?( 'com.apple.developer.icloud-container-environment', 'Development' ) >= 0
			plist_manager.update_array_value( 'com.apple.developer.icloud-container-environment', plist_manager.array_contains?( 'com.apple.developer.icloud-container-environment', 'Development' ), nil )
		end
	end
	if plist_manager.read( 'com.apple.developer.nfc.readersession.formats' ) != nil
		plist_manager.update_or_remove_array_value( 'com.apple.developer.nfc.readersession.formats', 'NDEF', nil )
	end

	if plist_manager.read( 'com.apple.developer.push-to-talk' ) == ''
		plist_manager.update_or_remove_array_value( 'UIBackgroundModes', 'push-to-talk', nil )
	end
	
	plist_manager.update_key( 'com.apple.developer.spatial-audio.profile-access', nil )
	plist_manager.update_key( 'com.apple.developer.media-device-discovery-extension', nil )
	plist_manager.update_key( 'com.apple.developer.on-demand-install-capable', nil )

	if $isXamarin
		# Xamarin 앱에서 HealthKit capability를 사용할 경우 업로드 에러 방지를 위해 추가적인 작업이 필요함		
		#
		# -> Payload에 포함된 실제 Entitlements.plist의 HealthKit 항목과 embeded.mobileprovision 에서 추출한 Entitlements-HealthKit 항목이 다를 수 있음
		# -> embeded.mobileprovision 추출 HealthKit 항목이 Payload의 Entitlements.plist에 존재하지 않을 경우 해당 항목을 삭제한 entitlements.plist를 코드 서명에 사용해야 한다
		#
		if xamarin_manager.read( 'com.apple.developer.healthkit' ) != nil
			plist_manager.update_key( 'com.apple.developer.healthkit', nil )
		end
		if xamarin_manager.read( 'com.apple.developer.healthkit.access' ) != nil
			plist_manager.update_key( 'com.apple.developer.healthkit.access', nil )
		end
		if xamarin_manager.read( 'com.apple.developer.healthkit.background-delivery' ) != nil
			plist_manager.update_key( 'com.apple.developer.healthkit.background-delivery', nil )
		end
		if xamarin_manager.read( 'com.apple.developer.healthkit.recalibrate-estimates' ) != nil
			plist_manager.update_key( 'com.apple.developer.healthkit.recalibrate-estimates', nil )
		end
		if xamarin_manager.read( 'com.apple.developer.homekit' ) != nil
			plist_manager.update_key( 'com.apple.developer.homekit', nil )
		end
		if xamarin_manager.read( 'com.apple.developer.healthkit' ) != nil
			plist_manager.update_key( 'com.apple.developer.healthkit', nil )
		end
		if xamarin_manager.read( 'com.apple.developer.healthkit' ) != nil
			plist_manager.update_key( 'com.apple.developer.healthkit', nil )
		end
		if xamarin_manager.read( 'com.apple.developer.usernotifications.communication' ) != nil
			plist_manager.update_key( 'com.apple.developer.usernotifications.communication', nil )
		end
		if xamarin_manager.read( 'com.apple.developer.usernotifications.time-sensitive' ) != nil
			plist_manager.update_key( 'com.apple.developer.usernotifications.time-sensitive', nil )
		end
		
		# Info.plist에 NSHealthUpdateUsageDescription 항목이 없으면 업로드 에러가 발생하므로 Payload Info.plist에 NSHealthUpdateUsageDescription 값이 없을 경우 새로 추가한다
		if plist_manager.read( 'NSHealthUpdateUsageDescription' ) == nil
			plist_manager.update_key( 'NSHealthUpdateUsageDescription', 'This description is created by AppSealing SDK' )
		end
	end

	plist_manager.save_file

	#........................................................................................
	# [Step 6] hermes bytecode(main.jsbuncle) 파일이 있을 경우 서버를 통해 암호화 진행

	if File.exist?( app.to_s + "/main.jsbundle" ) then
		encrypt_javascript_bytecode( app )
	end


	#........................................................................................
	# [Step 7] 변경된 파일이 있을 수 있으므로 app을 1차 재서명

	$current_step += 1
	puts "\n" + $current_step.to_s + ". Codesigning your app using certificate used to sign your IPA ..."
	sign_app_payload( app, folder, false )


	#........................................................................................
	# [Step 8] 인증서 정보 추출

	certificate = ""

	cert_info =
	{
		'subject0' => "",
		'issuer0' => "",
		'serial0' => "",
		'pubkey0' => "",
		'valid_from0' => "",
		'valid_to0' => "",
		'app_id0' => "",
		'team_id0' => "",

		'subject1' => "",
		'issuer1' => "",
		'serial1' => "",
		'pubkey1' => "",
		'valid_from1' => "",
		'valid_to1' => "",
		'app_id1' => "",
		'team_id1' => "",
		
		'subject2' => "",
		'issuer2' => "",
		'serial2' => "",
		'pubkey2' => "",
		'valid_from2' => "",
		'valid_to2' => "",
		'app_id2' => "",
		'team_id2' => ""
	}

	for i in ['0', '1', '2']
		# 인증서를 ASN.1 형식의 public key와 대조하기 위한 PEM 포맷을 snapshot으로 저장
		file = File.open( folder + "pemformat" + i +".txt" )
		file.each_line do |line|
			if line.start_with?( 'Modulus' ) then
				current_mode = 'pubkey' + i
				next
			end
			if line.start_with?('Exponent') then
				current_mode = 'none'
				next
			end
	
			if current_mode == 'pubkey' + i then
				cert_info[current_mode] += line.strip
			end
		end
		file.close unless file.nil?

		# public key 이외의 정보 저장
		file = File.open( folder + "certificate" + i + ".txt" )
		file.each_line do |line|
			if line.start_with?( 'subject=' ) then
				current_mode = 'subject' + i
				next
			end
			if line.start_with?( 'issuer=' ) then
				current_mode = 'issuer' + i
				next
			end
			if line.start_with?( 'serial=' ) then
				cert_info['serial' + i] = line.split( '=' )[1].strip
				next
			end
			if line.start_with?( 'notBefore=' ) then
				cert_info['valid_from' + i] = line.split( '=' )[1].strip
				next
			end
			if line.start_with?( 'notAfter=' ) then
				cert_info['valid_to' + i] = line.split( '=' )[1].strip
				next
			end
			if line.start_with?( '-----BEGIN PUBLIC KEY-----' ) then
				current_mode = 'pubkey' + i
				next
			end
			if line.start_with?( '-----END PUBLIC KEY-----' ) then
				current_mode = 'none'
				next
			end

			# 'Subject' / 'Issuer' 문자열 구성
			if current_mode == 'subject' + i or current_mode == 'issuer' + i then
				key = line.split( '=' )[0].strip
				value = line.split( '=' )[1].strip	
				if key == 'userId' then
					cert_info[current_mode] += ( "/UID=" + value )
				end
				if key == 'commonName' then
					cert_info[current_mode] += ( "/CN=" + value )
				end
				if key == 'organizationalUnitName' then
					cert_info[current_mode] += ( "/OU=" + value )
				end
				if key == 'organizationName' then
					cert_info[current_mode] += ( "/O=" + value )
				end
				if key == 'countryName' then
					cert_info[current_mode] += ( "/C=" + value )
				end
			end

		end
		file.close unless file.nil?

		certificate += ( "##$##&AI" + i + entitlements['app_id0'] + "\n" )
		certificate += ( "##$##&TI" + i + entitlements['team_id0'] + "\n" )
		certificate += ( "##$##&SJ" + i + cert_info['subject'    + i] + "\n" )
		certificate += ( "##$##&IS" + i + cert_info['issuer'     + i] + "\n" )
		certificate += ( "##$##&SN" + i + cert_info['serial'     + i] + "\n" )
		certificate += ( "##$##&PK" + i + cert_info['pubkey'     + i] + "\n" )
		certificate += ( "##$##&VF" + i + cert_info['valid_from' + i] + "\n" )
		certificate += ( "##$##&VT" + i + cert_info['valid_to'   + i] + "\n" )
	end

	if $antiswizzle == 'enable' then
		certificate += ( "##&##*ASENABLE\n" )
	end
	if $antihook == 'disable' then
		certificate += ( "##&##*AAHDISABLE\n" )
	end

	#........................................................................................
	# [Step 9] Payload/app/_CodeSignature/CodeResources 파일 읽기

	$current_step += 1
	puts "\n" + $current_step.to_s + ". Generating app integrity/certificate snapshot ..."
	snapshot = certificate + generate_hash_snapshot( app.to_s + "/_CodeSignature/CodeResources" )

	#........................................................................................
	# [Step 10] Assets.car 파일 모두 찾기
	assets = ''
	files = Dir.glob( app.to_s + '/**/Assets.car' ).select { |path| File.file?(path) }
	files.each do |car|
		assets += ( car.sub!( app.to_s + '/', '' ) + "\u0002" )
	end
	
	#........................................................................................
	# [Step 11] snapshot & assets를 API 서버로 전송해서 genesis 생성 (ruby에서 WF LEA 수행 불가능)

	$current_step += 1
	puts "\n" + $current_step.to_s + ". Encrypting app integrity/certificate snapshot ..."
	# snapshot과 assets를 hex string 포맷으로 변경
	begin
		snapshot = (snapshot.unpack ( 'H*' )).first
		assets = (assets.unpack ( 'H*' )).first
	rescue => e
		puts ".\n.\nProblem has occurred while storing integrity-snapshot of your app, please try again.\n[Error] " + e.to_s + "\nIf this error occurs continuously, contact AppSealing Help Center.\n.\n.\n"
		exit( false )
	end


	host = $baseURL + 'v3/sdk/ios/requestGenesisForIOS'
	uri = URI( host )
	request = Net::HTTP::Post.new( uri )

	form_data = [
		['account_id_hash', $account_id_hash],
		['bundle_id', $bundle_id], 
		['snapshot', snapshot],
		['assets', assets],
		['sdk_version', $sdk_version]
	]
	request.set_form form_data, 'multipart/form-data'

	begin
		response = Net::HTTP.start( uri.hostname, uri.port, use_ssl: uri.scheme == 'https' ) do |http|
			http.request( request )
		end
		result = JSON.parse( response.body )
		code = result['result']['code']
		message = result['result']['message']
		if code != '0000' then
			puts ".\n.\nError occured : " + message + "\nIf this error occurs continuously, contact AppSealing Help Center.\n.\n.\n"
			puts ".\n.\n error code : " + code + "\n"
			puts message
			exit( false )			
		end
		genesis_response = result['genesis']
	rescue => e
		puts "Request failed : " + e.to_s + "\n.\n.\n"
		exit( false )
	end

	genesis_binary = File.open( app.to_s + '/genesis', "wb" )
	genesis_binary.write([genesis_response].pack( 'H*' ))
	genesis_binary.close()


	#........................................................................................
	# [Step 12] 파라미터로 넘겨진 IPA에서 certificate / entitlement 를 추출하여 codesign 진행

	$current_step += 1
	puts "\n" + $current_step.to_s + ". Codesigning your app using certificate used to sign your IPA ..."
	sign_app_payload( app, folder, false )


	#........................................................................................
	# [Step 13] IPA로 묶음

	$current_step += 1
	puts "\n" + $current_step.to_s + ". Rebuilding & re-sigining IPA ..."
	ipa = '"' + ARGV[0] + '_Resigned.ipa"'
	File.delete( ipa ) if File.exist?( ipa )
	
	ipa = File.basename( ARGV[0] ) + "_Resigned.ipa"
	system( 'cd ' + folder + 'Package;zip -qr "' + ipa + '" ./' )
	system( 'mv "' + folder + "Package/" + ipa + '" "' + ARGV[0] + '_Resigned.ipa"' )
	system( "rm -rf " + folder + "*;rmdir " + folder )
	
	puts "\n\n>>> All processes have done successfully .......\n\n\n"
end
